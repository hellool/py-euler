My approach to solving Project Euler problems goes like this:

1. Build the most obvious solution that comes to mind.
2. A lot of times, the solution won't work, either becuase of mistakes or because it's too slow! Refine it.
3. Solve the problem (hopefully). Don't worry too much about clean or optimal code as long as it gets the job done -- the concepts are the important thing!
4. If the problem is interesting enough and there's time, try to solve it problem in a faster and/or more elegant way. 

The point is, I choose to see PE as a challenge to finish the task first and foremost, and then *maybe* optimize and clean it up. It's fine for others to have their own methodology, whether it be to write beautiful code for each solution or to push the limits of optimization (maybe don't choose Python if you'd like to be as efficient as possible...) The beauty of PE is the variety of ways people can approach it and learn from it. It may not be a good way to learn the finer points of programming languages given the basic set of tools required to approach the problems, but it's great at teaching fundamental skill in programming and problem solving, along with topics in mathematics (especially number theory), data structures and coding techniques to optimize for speed or memory. 

When you get near the Problem 50 mark, maybe even before, the problems tend to approach numbers and expected solution spaces that make it often necessary to produce code that has been optimized, at least to some extent. This is part of the beauty of PE, although also one of the potentially more frustrating aspects, especially when it appears that you have a working solution but you are missing a key point that makes it impossibly slow for the scale of the problem. For example, in later problems you might be asked to find prime numbers dozens of digits long. Typical methods taught in school would be far too slow for this!

If this all sounds intimidating, don't worry too much about it. The numbers in the early and most popular problems are fairly tame, and you'll quickly figure out if you want to go further down the list.

